{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","temperatures","setTemperatures","input","setInput","city","setCity","useEffect","getWeatherRequest","a","fetch","response","json","data","console","log","userCity","charAt","toUpperCase","slice","className","value","id","placeholder","onChange","e","target","onClick","preventDefault","undefined","weather","style","src","icon","alt","description","class","Math","round","main","temp","temp_min","temp_max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PA8EeA,EA3EH,WAEV,IACA,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwBF,mBAAS,IAAjC,mBAAMG,EAAN,KAAYC,EAAZ,KACA,EAAqBJ,mBAAS,UAA9B,mBAAMK,EAAN,KAAWC,EAAX,KAEAC,qBAAU,WACNC,MACF,CAACH,IAEH,IAAMG,EAAiB,uCAAE,8BAAAC,EAAA,sEACCC,MAAM,oDAAD,OAAqDL,EAArD,+BAVjB,qCASW,cACfM,EADe,gBAEHA,EAASC,OAFN,OAEfC,EAFe,OAGrBX,EAAgBW,GAChBC,QAAQC,IAAIF,GAJS,2CAAF,qDAkBjBG,EAASX,EAAKY,OAAO,GAAGC,cAAeb,EAAKc,MAAM,GAItD,OAEE,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,cAAf,SACE,+CAEF,uBAAMA,UAAU,eAAhB,UACG,uBAAOC,MAAOlB,EAAOmB,GAAG,aAAaC,YAAY,yBAAyBH,UAAU,eAAeI,SAtBzF,SAACC,GAClBrB,EAASqB,EAAEC,OAAOL,UAsBX,wBAAQM,QAnBA,SAACF,GAChBA,EAAEG,iBACFtB,EAAQH,GACRC,EAAS,KAgB2BgB,UAAU,eAAeE,GAAG,aAAzD,4BAGqBO,IAAvB5B,EAAa6B,QACZ,mBAAGV,UAAU,WAAWW,MAAO,CAAC,MAAQ,MAAM,SAAW,UAAzD,gDAEE,gCACA,sBAAKX,UAAU,6BAAf,UACE,qBAAKY,IAAK,oCAAoC,GAApC,OAAwC/B,EAAa6B,QAAQ,GAAGG,MAAO,OAAQC,IAAI,KAC7F,mCAAMjC,EAAa6B,QAAQ,GAAGK,kBAEhC,qBAAKf,UAAU,OAAf,SACE,+BAAI,mBAAGgB,MAAM,0BAAb,IAA2CpB,OAE7C,sBAAKI,UAAU,sBAAf,UACE,+BAAKiB,KAAKC,MAAMrC,EAAasC,KAAKC,MAAlC,WACA,sBAAKpB,UAAU,eAAf,UACE,uCAAUiB,KAAKC,MAAMrC,EAAasC,KAAKE,UAAvC,WACA,uCAAUJ,KAAKC,MAAMrC,EAAasC,KAAKG,UAAvC,wBClDDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fcfd2d66.chunk.js","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport './App.css';\n\nconst App = ()=>{\n\n  const API_KEY=\"ee5cda74467a8a1e41d673a93a7bdbc9\";    \n  const [temperatures,setTemperatures]= useState([]);\n  const[input,setInput] = useState(\"\");\n  const[city,setCity]= useState(\"Dublin\");\n  \n  useEffect(()=>{\n      getWeatherRequest();\n  },[city]);\n\n  const getWeatherRequest= async ()=>{\n      const response= await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${API_KEY}`);\n      const data= await response.json();\n      setTemperatures(data);\n      console.log(data);     \n  }\n\n  const handleChange=(e)=>{\n    setInput(e.target.value);\n  }\n\n  const getWeather=(e)=>{\n    e.preventDefault();\n    setCity(input);\n    setInput('');\n  }\n\n  //convert first char of letter enter by user to uppercase\n  const userCity=city.charAt(0).toUpperCase()+ city.slice(1);\n\n  // const icon=\"http://openweathermap.org/img/wn/\"+ `${temperatures.weather[0].icon}`+\".png\";\n  \n    return(\n\n      <div className=\"App\">  \n        <div className=\"header pb-5\">\n          <h1>Weather App</h1>\n        </div>\n        <form className=\"weather-form\">\n           <input value={input} id=\"search-bar\" placeholder=\"Enter the city name...\" className=\"form-control\" onChange={handleChange}/>\n           <button onClick={getWeather} className=\"btn btn-dark\" id=\"search-btn\">Search</button>\n        </form>\n        \n        {temperatures.weather===undefined?(\n          <p className=\"errorMsg\" style={{\"color\":\"red\",\"fontSize\":\"1.5rem\"}}>Please enter the correct city name</p>\n          ):(\n            <div>\n            <div className=\"weather-status d-flex pb-3\">\n              <img src={\"http://openweathermap.org/img/wn/\"+ `${temperatures.weather[0].icon}`+\".png\"} alt=\"\"/>\n              <h1> {temperatures.weather[0].description}</h1>\n            </div>\n            <div className=\"city\">\n              <h1><i class=\"fas fa-location-arrow\"></i> {userCity}</h1>\n            </div>\n            <div className=\"temperature-section\">\n              <h1>{Math.round(temperatures.main.temp)}°C</h1>   \n              <div className=\"min-max-temp\">\n                <h2>Min: {Math.round(temperatures.main.temp_min)}°C</h2>\n                <h2>Max: {Math.round(temperatures.main.temp_max)}°C</h2>\n              </div>       \n            </div>\n          </div>\n        )}\n        \n            \n      </div>\n  \n    );\n  \n  \n    \n \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}